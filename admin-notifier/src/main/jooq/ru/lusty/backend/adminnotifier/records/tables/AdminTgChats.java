/*
 * This file is generated by jOOQ.
 */
package ru.lusty.backend.adminnotifier.records.tables;


import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.lusty.backend.adminnotifier.records.Keys;
import ru.lusty.backend.adminnotifier.records.Public;
import ru.lusty.backend.adminnotifier.records.tables.records.AdminTgChatsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AdminTgChats extends TableImpl<AdminTgChatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.admin_tg_chats</code>
     */
    public static final AdminTgChats ADMIN_TG_CHATS = new AdminTgChats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminTgChatsRecord> getRecordType() {
        return AdminTgChatsRecord.class;
    }

    /**
     * The column <code>public.admin_tg_chats.id</code>.
     */
    public final TableField<AdminTgChatsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.admin_tg_chats.chat_id</code>.
     */
    public final TableField<AdminTgChatsRecord, String> CHAT_ID = createField(DSL.name("chat_id"), SQLDataType.CLOB, this, "");

    private AdminTgChats(Name alias, Table<AdminTgChatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AdminTgChats(Name alias, Table<AdminTgChatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.admin_tg_chats</code> table reference
     */
    public AdminTgChats(String alias) {
        this(DSL.name(alias), ADMIN_TG_CHATS);
    }

    /**
     * Create an aliased <code>public.admin_tg_chats</code> table reference
     */
    public AdminTgChats(Name alias) {
        this(alias, ADMIN_TG_CHATS);
    }

    /**
     * Create a <code>public.admin_tg_chats</code> table reference
     */
    public AdminTgChats() {
        this(DSL.name("admin_tg_chats"), null);
    }

    public <O extends Record> AdminTgChats(Table<O> child, ForeignKey<O, AdminTgChatsRecord> key) {
        super(child, key, ADMIN_TG_CHATS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AdminTgChatsRecord> getPrimaryKey() {
        return Keys.ADMIN_TG_CHATS_PKEY;
    }

    @Override
    public AdminTgChats as(String alias) {
        return new AdminTgChats(DSL.name(alias), this);
    }

    @Override
    public AdminTgChats as(Name alias) {
        return new AdminTgChats(alias, this);
    }

    @Override
    public AdminTgChats as(Table<?> alias) {
        return new AdminTgChats(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminTgChats rename(String name) {
        return new AdminTgChats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminTgChats rename(Name name) {
        return new AdminTgChats(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AdminTgChats rename(Table<?> name) {
        return new AdminTgChats(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
