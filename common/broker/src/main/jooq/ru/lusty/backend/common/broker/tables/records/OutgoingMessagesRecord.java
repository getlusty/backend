/*
 * This file is generated by jOOQ.
 */
package ru.lusty.backend.common.broker.tables.records;


import java.time.Instant;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import ru.lusty.backend.common.broker.tables.OutgoingMessages;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OutgoingMessagesRecord extends UpdatableRecordImpl<OutgoingMessagesRecord> implements Record5<UUID, String, String, String, Instant> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.outgoing_messages.id</code>.
     */
    public OutgoingMessagesRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.outgoing_messages.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.outgoing_messages.exchange</code>.
     */
    public OutgoingMessagesRecord setExchange(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.outgoing_messages.exchange</code>.
     */
    public String getExchange() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.outgoing_messages.routing_key</code>.
     */
    public OutgoingMessagesRecord setRoutingKey(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.outgoing_messages.routing_key</code>.
     */
    public String getRoutingKey() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.outgoing_messages.json</code>.
     */
    public OutgoingMessagesRecord setJson(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.outgoing_messages.json</code>.
     */
    public String getJson() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.outgoing_messages.created_at</code>.
     */
    public OutgoingMessagesRecord setCreatedAt(Instant value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.outgoing_messages.created_at</code>.
     */
    public Instant getCreatedAt() {
        return (Instant) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, String, String, Instant> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<UUID, String, String, String, Instant> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return OutgoingMessages.OUTGOING_MESSAGES.ID;
    }

    @Override
    public Field<String> field2() {
        return OutgoingMessages.OUTGOING_MESSAGES.EXCHANGE;
    }

    @Override
    public Field<String> field3() {
        return OutgoingMessages.OUTGOING_MESSAGES.ROUTING_KEY;
    }

    @Override
    public Field<String> field4() {
        return OutgoingMessages.OUTGOING_MESSAGES.JSON;
    }

    @Override
    public Field<Instant> field5() {
        return OutgoingMessages.OUTGOING_MESSAGES.CREATED_AT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getExchange();
    }

    @Override
    public String component3() {
        return getRoutingKey();
    }

    @Override
    public String component4() {
        return getJson();
    }

    @Override
    public Instant component5() {
        return getCreatedAt();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getExchange();
    }

    @Override
    public String value3() {
        return getRoutingKey();
    }

    @Override
    public String value4() {
        return getJson();
    }

    @Override
    public Instant value5() {
        return getCreatedAt();
    }

    @Override
    public OutgoingMessagesRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public OutgoingMessagesRecord value2(String value) {
        setExchange(value);
        return this;
    }

    @Override
    public OutgoingMessagesRecord value3(String value) {
        setRoutingKey(value);
        return this;
    }

    @Override
    public OutgoingMessagesRecord value4(String value) {
        setJson(value);
        return this;
    }

    @Override
    public OutgoingMessagesRecord value5(Instant value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public OutgoingMessagesRecord values(UUID value1, String value2, String value3, String value4, Instant value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OutgoingMessagesRecord
     */
    public OutgoingMessagesRecord() {
        super(OutgoingMessages.OUTGOING_MESSAGES);
    }

    /**
     * Create a detached, initialised OutgoingMessagesRecord
     */
    public OutgoingMessagesRecord(UUID id, String exchange, String routingKey, String json, Instant createdAt) {
        super(OutgoingMessages.OUTGOING_MESSAGES);

        setId(id);
        setExchange(exchange);
        setRoutingKey(routingKey);
        setJson(json);
        setCreatedAt(createdAt);
        resetChangedOnNotNull();
    }
}
