/*
 * This file is generated by jOOQ.
 */
package ru.lusty.backend.profile.records.tables;


import java.time.Instant;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.lusty.backend.common.jooq.JooqInstantConverter;
import ru.lusty.backend.profile.api.Gender;
import ru.lusty.backend.profile.records.Indexes;
import ru.lusty.backend.profile.records.Keys;
import ru.lusty.backend.profile.records.Public;
import ru.lusty.backend.profile.records.tables.records.ProfilesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Profiles extends TableImpl<ProfilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.profiles</code>
     */
    public static final Profiles PROFILES = new Profiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfilesRecord> getRecordType() {
        return ProfilesRecord.class;
    }

    /**
     * The column <code>public.profiles.id</code>.
     */
    public final TableField<ProfilesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.profiles.name</code>.
     */
    public final TableField<ProfilesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.profiles.birthday</code>.
     */
    public final TableField<ProfilesRecord, LocalDate> BIRTHDAY = createField(DSL.name("birthday"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.profiles.gender</code>.
     */
    public final TableField<ProfilesRecord, Gender> GENDER = createField(DSL.name("gender"), SQLDataType.CLOB.nullable(false), this, "", new EnumConverter<String, Gender>(String.class, Gender.class));

    /**
     * The column <code>public.profiles.hidden</code>.
     */
    public final TableField<ProfilesRecord, Boolean> HIDDEN = createField(DSL.name("hidden"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.profiles.created_at</code>.
     */
    public final TableField<ProfilesRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.profiles.deleted_at</code>.
     */
    public final TableField<ProfilesRecord, Instant> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.profiles.instagram</code>.
     */
    public final TableField<ProfilesRecord, String> INSTAGRAM = createField(DSL.name("instagram"), SQLDataType.CLOB, this, "");

    private Profiles(Name alias, Table<ProfilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Profiles(Name alias, Table<ProfilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.profiles</code> table reference
     */
    public Profiles(String alias) {
        this(DSL.name(alias), PROFILES);
    }

    /**
     * Create an aliased <code>public.profiles</code> table reference
     */
    public Profiles(Name alias) {
        this(alias, PROFILES);
    }

    /**
     * Create a <code>public.profiles</code> table reference
     */
    public Profiles() {
        this(DSL.name("profiles"), null);
    }

    public <O extends Record> Profiles(Table<O> child, ForeignKey<O, ProfilesRecord> key) {
        super(child, key, PROFILES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROFILES_SEARCH_IDX);
    }

    @Override
    public UniqueKey<ProfilesRecord> getPrimaryKey() {
        return Keys.PROFILES_PKEY;
    }

    @Override
    public Profiles as(String alias) {
        return new Profiles(DSL.name(alias), this);
    }

    @Override
    public Profiles as(Name alias) {
        return new Profiles(alias, this);
    }

    @Override
    public Profiles as(Table<?> alias) {
        return new Profiles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Profiles rename(String name) {
        return new Profiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Profiles rename(Name name) {
        return new Profiles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Profiles rename(Table<?> name) {
        return new Profiles(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, String, LocalDate, Gender, Boolean, Instant, Instant, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super String, ? super LocalDate, ? super Gender, ? super Boolean, ? super Instant, ? super Instant, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super String, ? super LocalDate, ? super Gender, ? super Boolean, ? super Instant, ? super Instant, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
