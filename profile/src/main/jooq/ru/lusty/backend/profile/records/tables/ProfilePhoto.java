/*
 * This file is generated by jOOQ.
 */
package ru.lusty.backend.profile.records.tables;


import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.lusty.backend.profile.records.Keys;
import ru.lusty.backend.profile.records.Public;
import ru.lusty.backend.profile.records.tables.records.ProfilePhotoRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProfilePhoto extends TableImpl<ProfilePhotoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.profile_photo</code>
     */
    public static final ProfilePhoto PROFILE_PHOTO = new ProfilePhoto();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfilePhotoRecord> getRecordType() {
        return ProfilePhotoRecord.class;
    }

    /**
     * The column <code>public.profile_photo.profile_id</code>.
     */
    public final TableField<ProfilePhotoRecord, UUID> PROFILE_ID = createField(DSL.name("profile_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.profile_photo.file_id</code>.
     */
    public final TableField<ProfilePhotoRecord, UUID> FILE_ID = createField(DSL.name("file_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.profile_photo.priority</code>.
     */
    public final TableField<ProfilePhotoRecord, Integer> PRIORITY = createField(DSL.name("priority"), SQLDataType.INTEGER, this, "");

    private ProfilePhoto(Name alias, Table<ProfilePhotoRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProfilePhoto(Name alias, Table<ProfilePhotoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.profile_photo</code> table reference
     */
    public ProfilePhoto(String alias) {
        this(DSL.name(alias), PROFILE_PHOTO);
    }

    /**
     * Create an aliased <code>public.profile_photo</code> table reference
     */
    public ProfilePhoto(Name alias) {
        this(alias, PROFILE_PHOTO);
    }

    /**
     * Create a <code>public.profile_photo</code> table reference
     */
    public ProfilePhoto() {
        this(DSL.name("profile_photo"), null);
    }

    public <O extends Record> ProfilePhoto(Table<O> child, ForeignKey<O, ProfilePhotoRecord> key) {
        super(child, key, PROFILE_PHOTO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProfilePhotoRecord> getPrimaryKey() {
        return Keys.PROFILE_PHOTO_PKEY;
    }

    @Override
    public ProfilePhoto as(String alias) {
        return new ProfilePhoto(DSL.name(alias), this);
    }

    @Override
    public ProfilePhoto as(Name alias) {
        return new ProfilePhoto(alias, this);
    }

    @Override
    public ProfilePhoto as(Table<?> alias) {
        return new ProfilePhoto(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfilePhoto rename(String name) {
        return new ProfilePhoto(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfilePhoto rename(Name name) {
        return new ProfilePhoto(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfilePhoto rename(Table<?> name) {
        return new ProfilePhoto(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super UUID, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super UUID, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
