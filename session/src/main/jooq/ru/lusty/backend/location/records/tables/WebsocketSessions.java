/*
 * This file is generated by jOOQ.
 */
package ru.lusty.backend.location.records.tables;


import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.lusty.backend.common.jooq.JooqInstantConverter;
import ru.lusty.backend.location.records.Indexes;
import ru.lusty.backend.location.records.Keys;
import ru.lusty.backend.location.records.Public;
import ru.lusty.backend.location.records.tables.records.WebsocketSessionsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WebsocketSessions extends TableImpl<WebsocketSessionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.websocket_sessions</code>
     */
    public static final WebsocketSessions WEBSOCKET_SESSIONS = new WebsocketSessions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WebsocketSessionsRecord> getRecordType() {
        return WebsocketSessionsRecord.class;
    }

    /**
     * The column <code>public.websocket_sessions.id</code>.
     */
    public final TableField<WebsocketSessionsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.websocket_sessions.user_id</code>.
     */
    public final TableField<WebsocketSessionsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.websocket_sessions.active_from</code>.
     */
    public final TableField<WebsocketSessionsRecord, Instant> ACTIVE_FROM = createField(DSL.name("active_from"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.websocket_sessions.active_to</code>.
     */
    public final TableField<WebsocketSessionsRecord, Instant> ACTIVE_TO = createField(DSL.name("active_to"), SQLDataType.LOCALDATETIME(6), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.websocket_sessions.device_id</code>.
     */
    public final TableField<WebsocketSessionsRecord, String> DEVICE_ID = createField(DSL.name("device_id"), SQLDataType.CLOB.nullable(false), this, "");

    private WebsocketSessions(Name alias, Table<WebsocketSessionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private WebsocketSessions(Name alias, Table<WebsocketSessionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.websocket_sessions</code> table reference
     */
    public WebsocketSessions(String alias) {
        this(DSL.name(alias), WEBSOCKET_SESSIONS);
    }

    /**
     * Create an aliased <code>public.websocket_sessions</code> table reference
     */
    public WebsocketSessions(Name alias) {
        this(alias, WEBSOCKET_SESSIONS);
    }

    /**
     * Create a <code>public.websocket_sessions</code> table reference
     */
    public WebsocketSessions() {
        this(DSL.name("websocket_sessions"), null);
    }

    public <O extends Record> WebsocketSessions(Table<O> child, ForeignKey<O, WebsocketSessionsRecord> key) {
        super(child, key, WEBSOCKET_SESSIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_WEBSOCKET_SESSIONS_ACTIVE_TO, Indexes.IDX_WEBSOCKET_SESSIONS_USER_ID);
    }

    @Override
    public UniqueKey<WebsocketSessionsRecord> getPrimaryKey() {
        return Keys.WEBSOCKET_SESSIONS_PKEY;
    }

    @Override
    public WebsocketSessions as(String alias) {
        return new WebsocketSessions(DSL.name(alias), this);
    }

    @Override
    public WebsocketSessions as(Name alias) {
        return new WebsocketSessions(alias, this);
    }

    @Override
    public WebsocketSessions as(Table<?> alias) {
        return new WebsocketSessions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WebsocketSessions rename(String name) {
        return new WebsocketSessions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WebsocketSessions rename(Name name) {
        return new WebsocketSessions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WebsocketSessions rename(Table<?> name) {
        return new WebsocketSessions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, Instant, Instant, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UUID, ? super UUID, ? super Instant, ? super Instant, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UUID, ? super UUID, ? super Instant, ? super Instant, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
